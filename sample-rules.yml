---
library:
- name: apps-to-consider
  pipeline:
  - GetResources('/v2/organizations', 'org')
  - Debug('Found org ', org.entity.name)
  - Filter(org.entity.name != 'system')
  - Debug('Selected org ', org.entity.name)
  - GetResources(org.entity.spaces_url, 'space')
  - Debug('Found space ', space.entity.name)
  - Filter(space.entity.name != 'prod')
  - Debug('Selected space ', space.entity.name)
  - GetResources(space.entity.apps_url, 'app')
  - Debug('Found app ', app.entity.name)
- name: stop-app
  pipeline:
  - Debug('Stopping app ', app.entity.name)
  action:
  - PUT(app.metadata.url, Template('StopApp'))
- name: unbind-app-services
  pipeline:
  - GetResources(app.entity.service_bindings_url, 'service_binding')
  action:
  - DELETE(service_binding.metadata.url)
- name: delete-app
  action:
  - DELETE(app.metadata.url)

templates:
  StopApp: >
    {
      "state": "STOPPED"
    }
  SpaceDeveloper: >
    {
      "type": "space_developer", 
      "relationships": { 
        "user": {
          "data": {
            "guid": "%s"
          }
        },
        "space": {
          "data": {
            "guid": "%s"
          }
        }
      }
    }

rules:
- name: stop non-prod apps
  schedule:
    frequency: 1h
  pipeline:
  - Call('apps-to-consider')
  - Filter(app.state == 'STARTED' && Since(app.updated_at) > Duration('1h'))
  - Debug('Selected app ', app.entity.name)
  actions:
  - Call('stop-app')

# - name: delete stopped non-prod apps
#   schedule:
#     frequency: 3h
#   pipeline:
#   - Call('apps-to-consider')
#   - Filter(app.state == 'STOPPED' && Since(app.updated_at) > Duration('36h'))
#   actions:
#   - Call('stop-app')
#   - Call('unbind-app-services')
#   - Call('delete-app')

# - name: delete unbound routes
#   schedule:
#     frequency: 3h
#   pipeline:
#   - GetResources('/v3/routes', 'route')
#   - Filter(len(route.destinations) == 0)
#   actions:
#   - DELETE(route.links.self)

# V3 -- but V3 does not have a mechanism to query based on an event guid or timestamp
# - name: what would events look like (V3)
#   audit_events:
#     frequency: 5m
#     variable: audit_event
#     list:
#     - audit.space.create
#   pipeline:
#   - GetResources(Concat('/v3/roles?organization_guids=', audit_event.organization.guid, '&types=organization_manager'), 'role')
#   actions:
#   - POST('/v3/roles', Template('SpaceDeveloper', role.relationships.user.data.guid, audit_event.space.guid))

# V2 -- V2 is deprecated but allows a timestamp query parameter
# - name: what would events look like (V2)
#   events:
#     frequency: 5m
#     variable: event
#     list:
#     - audit.space.create
#   pipeline:
#   - GetResources(Template('OrgManagerRoleQuery', event.organization_guid), 'role')
#   actions:
#   - POST('/v3/roles', Template('SpaceDeveloper', role.relationships.user.data.guid, event.space_guid))
